import { ref } from 'vue'
import CryptoJS from 'crypto-js'

export const useSecureContact = () => {
  const config = useRuntimeConfig()
  const isLoading = ref(false)
  const error = ref<string | null>(null)

  // Cl√© de d√©chiffrement (doit correspondre √† celle du backend)
  const encryptionKey = config.public.phoneEncryptionKey || '9f4b7dc2a1e6f8b3c0d2e4f6a7b9c1d09f4b7dc2a1e6f8b3c0d2e4f6a7b9c1d0'

  // D√©chiffrer le num√©ro de t√©l√©phone
  const decryptPhone = (encryptedData: string): string => {
    try {
      console.log('üîì D√©chiffrement de:', encryptedData)
      console.log('üîë Cl√© utilis√©e:', encryptionKey)
      
      // S√©parer IV et donn√©es chiffr√©es
      const parts = encryptedData.split(':')
      if (parts.length !== 2) {
        throw new Error('Format de donn√©es invalide')
      }

      const ivHex = parts[0]
      const encryptedHex = parts[1]
      
      // Convertir en format CryptoJS
      const iv = CryptoJS.enc.Hex.parse(ivHex)
      const key = CryptoJS.enc.Hex.parse(encryptionKey)
      const encrypted = CryptoJS.enc.Hex.parse(encryptedHex)
      
      // D√©chiffrer
      const decrypted = CryptoJS.AES.decrypt(
        CryptoJS.enc.Base64.stringify(encrypted), 
        key, 
        {
          iv: iv,
          mode: CryptoJS.mode.CBC,
          padding: CryptoJS.pad.Pkcs7
        }
      )

      const result = decrypted.toString(CryptoJS.enc.Utf8)
      
      if (!result) {
        throw new Error('D√©chiffrement √©chou√© - r√©sultat vide')
      }

      console.log('‚úÖ D√©chiffrement r√©ussi:', result)
      return result

    } catch (err) {
      console.error('‚ùå Erreur de d√©chiffrement:', err)
      throw new Error(`Impossible de d√©chiffrer: ${err.message}`)
    }
  }

  // R√©cup√©rer le num√©ro de t√©l√©phone chiffr√© du prestataire
  const getProviderPhone = async (providerId: string): Promise<string | null> => {
    isLoading.value = true
    error.value = null

    try {
      const token = localStorage.getItem('workion_token')
      if (!token) {
        throw new Error('Token d\'authentification manquant')
      }

      const response = await $fetch(`${config.public.apiBase}/secure-contact/provider-phone/${providerId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      console.log('üîç R√©ponse du serveur:', response)

      if (response.data.encryptedPhone) {
        console.log('üîê Donn√©es chiffr√©es re√ßues:', response.data.encryptedPhone)
        
        // D√©chiffrer le num√©ro de t√©l√©phone
        const decryptedPhone = decryptPhone(response.data.encryptedPhone)
        
        console.log(`‚úÖ Num√©ro r√©cup√©r√© de mani√®re s√©curis√©e pour ${response.data.providerName}`)
        
        return decryptedPhone
      } else {
        console.error('‚ùå Structure de r√©ponse:', response)
        throw new Error('R√©ponse invalide du serveur')
      }

    } catch (err: any) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration s√©curis√©e du num√©ro:', err)
      
      if (err.status === 403) {
        error.value = 'Abonnement actif requis pour contacter les prestataires'
      } else if (err.status === 404) {
        error.value = 'Prestataire ou num√©ro de t√©l√©phone non trouv√©'
      } else {
        error.value = err.message || 'Erreur lors de la r√©cup√©ration du num√©ro'
      }
      
      return null
    } finally {
      isLoading.value = false
    }
  }

  // Contacter via WhatsApp de mani√®re s√©curis√©e
  const contactProviderSecurely = async (providerId: string, providerName: string) => {
    try {
      const phone = await getProviderPhone(providerId)
      
      if (!phone) {
        throw new Error(error.value || 'Impossible de r√©cup√©rer le num√©ro de t√©l√©phone')
      }

      // R√©cup√©rer les informations utilisateur
      const userStr = localStorage.getItem('workion_user')
      let userName = 'Client Workion'
      
      if (userStr) {
        try {
          const user = JSON.parse(userStr)
          userName = `${user.firstname || ''} ${user.lastname || ''}`.trim() || 'Client Workion'
        } catch (error) {
          console.error('Erreur lecture donn√©es utilisateur:', error)
        }
      }

      // Nettoyer le num√©ro
      const cleanPhone = phone.replace(/[\s\-\(\)]/g, '')
      
      // Message WhatsApp
      const message = `Bonjour ${providerName},

Je suis ${userName} et je vous contacte via la plateforme Workion.

Je suis int√©ress√©(e) par vos services et j'aimerais discuter d'un projet avec vous.

Merci !`

      const encodedMessage = encodeURIComponent(message)
      const whatsappUrl = `https://wa.me/${cleanPhone}?text=${encodedMessage}`
      
      window.open(whatsappUrl, '_blank')
      
      console.log(`‚úÖ Redirection WhatsApp pour ${providerName} (${cleanPhone})`)
      
      return true
    } catch (err: any) {
      console.error('‚ùå Erreur contact s√©curis√©:', err)
      error.value = err.message
      return false
    }
  }

  // Test avec donn√©es backend
  const testWithBackendData = async () => {
    try {
      const response = await $fetch('http://localhost:3100/api/debug-crypto/test/221701234567')
      console.log('üîç Test backend:', response.data)
      
      if (response.data.success) {
        const result = decryptPhone(response.data.test.encrypted)
        const match = result === response.data.test.original
        console.log('üéØ Test r√©sultat:', { result, expected: response.data.test.original, match })
        return match
      }
    } catch (err) {
      console.error('‚ùå Erreur test:', err)
      return false
    }
  }

  const clearError = () => {
    error.value = null
  }

  return {
    isLoading: isLoading as Readonly<Ref<boolean>>,
    error: error as Readonly<Ref<string | null>>,
    getProviderPhone,
    contactProviderSecurely,
    clearError,
    testWithBackendData
  }
}
